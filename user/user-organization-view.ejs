<% include ./../partials/header %>
	<div> organization:
		<%- JSON.stringify(organization) %>
	</div>
	<!--<div>	registry: <%- JSON.stringify(registry) %></div>
<div>	partys: <%- JSON.stringify(partys) %></div>
<div>	statistic : <%- JSON.stringify(statistic) %></div>
<div>	options: <%- JSON.stringify(options) %></div>
-->
	<div class="main"></div>

	<% include ./../partials/end-body %>
		<script id="layout-template" type="text/template">
			<div class="user-data">User </div>
			<div class="registry-data"></div>
			<div class="party-data"></div>
		</script>

		<script>
			$(function(){
	var OrganizationStatus = Backbone.Model.extend({
		idAttribute:'idorganization',
		defaults:{
			idorganization:-1,
			idstatus: -1
		},
		url:function(){
			return '/api/user/organization/'+this.get('idorganization')+'/status';
		}
	});
	
	var UserView = Backbone.View.extend({
		showSave:function(save){
			
		}
	});
	
	var RegistryModel = Backbone.Model.extend({
		idAttribute:'idregistry'
	});
	
	var RegistryCollection = Backbone.Collection.extend({
		defaults:{
			idorganization:-1,
			statistic:[]
		},
		model: RegistryModel,
		url: function(){
			return '/api/user/organization/'+this.options.idorganization+'/registrys';
		},
		initialize:function(models, options){
			this.options = _.extend(this.defaults, options);
			this.options.statistic = _.sortBy(_.map(_.countBy(models,'profession'), function(count,key){ return {name: key, value:count }; }),'name');
		},
		parse:function(response){
			this.options.statistic = _.sortBy(_.map(_.countBy(response,'profession'), function(count,key){ return {name: key, value:count }; }),'name');
			console.log('.');
			return response;
		},
						
	})
	
	var RegistryView = Backbone.View.extend({
		statisticTemplate: NL.Template["organization-statistic"],
		template: NL.Template["organization-registry"],
		defaults:{
			timeOutHandler:-1,
			idorganization:-1,
			registry:[]	
		},
		initialize:function(options){
			this.options = _.extend(this.defaults, options);
			this.collection = new RegistryCollection(
				this.options.registry, {
				idorganization: this.options.idorganization
			});
			this.collection.on('reset',this.render,this);
			this.render();
			this.startTimer();
			
		},
		render:function(){
			this.$el.html('');
			this.$el.append(this.statisticTemplate(this.collection.options.statistic));
			this.$el.append(this.template(this.collection.toJSON()));
			//this.$el.append(JSON.stringify(this.collection.options.statistic));
			//this.$el.append(JSON.stringify(this.collection.toJSON()));
		},
		startTimer:function(){
			var self = this;
			if (this.options.timeOutHandler < 0 ){
				this.options.timeOutHandler = setInterval(function(){
					self.collection.fetch({reset: true});
				},10000);
			}
		},
		stopTimer:function(){
			clearInterval(this.options.timeOutHandler);
			this.options.timeOutHandler = -1;
		}
	});
	
	var MemberCollection = Backbone.Collection.extend({
		model : MemberModel
	});
	
	var MemberModel = Backbone.Model.extend({
		defaults:{
			partyname:'',
			username:'',
			displayname:'',
			profession:'',
			havebanner:false,
			havefood:false,
			haveTag:''
		}
	});
	
	var PartyModel = Backbone.Model.extend({
		defaults: function(){
			return {
				partyname: '',
				members: new MemberCollection()
			};
		}
	});
	
	var PartyCollection = Backbone.Collection.extend({
		model: PartyModel,
		url: function(){
			return '/api/user/organization/'+this.options.idorganization+'/partys';
		},
		initialize: function(options){
			
		}
	});
	
	var PartyView = Backbone.View.extend({
		defaults:{
			timeOutHandler:-1,
			idorganization:-1
		},
		initialize:function(options){
			this.options = _.extend(this.defaults, options);
		},
		startTimer:function(){
			var self = this;
			if (this.options.timeOutHandler < 0 ){
			this.options.timeOutHandler = setInterval(function(){
				self.collection.fetch({});
			},10000);
			}
		},
		stopTimer:function(){
			clearInterval(this.options.timeOutHandler);
			this.options.timeOutHandler = -1;
		},
	});
		
	var Main = Backbone.View.extend({
		defaults:{
			timeOutHandler:-1,
			organization: {},
			registry: [],
			partys:[],
			statistic:[]
		},
		template: _.template($('#layout-template').html()),
		initialize:function(options){
			this.options = _.extend(this.defaults, options);			
			this.model = new OrganizationStatus({
				idstatus: this.options.organization.idstatus,
				idorganization: this.options.organization.idorganization
			});			
			this.model.on('change', this.statusChange, this);			
			this.render();
			this.statusChange(this.model);			
			this.startTimer();			
		},
		render:function(){
			this.$el.html(this.template(this.options));
		},	
		startTimer:function(){
			var self = this;
			if (this.options.timeOutHandler < 0 ){
				this.options.timeOutHandler = setInterval(function(){
					self.model.fetch({});
				},10000);
			}
		},
		stopTimer:function(){
			clearInterval(this.options.timeOutHandler);
			this.options.timeOutHandler = -1;
		},
		showUserView:function(save){
			this.userView = this.userView || new UserView({});
			this.userView.showSave(save);
		},
		showPartyView:function(stopTimer){
			this.partyView = this.partyView || new PartyView({});			
			if(stopTimer){
				this.partyView.stopTimer();
			} else {
				this.partyView.startTimer();
			}	
		},
		createRegistryView:function(){
			return new RegistryView();
		},
		showRegistryView:function(stopTimer){
			this.registryView = this.registryView || new RegistryView({
				el: '.registry-data',
				registry: this.options.registry,
				idorganization:this.options.organization.idorganization
			});
			if(stopTimer){
				this.registryView.stopTimer();
			} else {
				this.registryView.startTimer();
			}
		},
		removeViews:function(){
				
		},
		statusChange:function(model){
			console.log('status changed:'+ model.get('idstatus'));
			var status = model.get('idstatus');
			if ( status == 1 ){
				this.removeViews();
			}			
			if ( status == 2){
				this.showUserView(true);
				this.showRegistryView(false);
			}			
			if ( status == 3){
				this.showUserView(false);
				this.showRegistryView(false);
			}			
			if ( status == 4){
				this.showUserView(false);
				this.showRegistryView(false);
			}			
			if ( status == 5){
				this.showUserView(false);
				this.showRegistryView(true);
				this.showPartyView(false);
			}			
			if( status == 6){
				this.showUserView(false);
				this.showRegistryView(true);
				this.showPartyView(true);
				this.stopTimer();
			}
		}		
	});
	
	var view = new Main({
		el: '.main', 
		organization: <%- JSON.stringify(organization) %>,
		registry: <%- JSON.stringify(registry) %>,
		partys: <%- JSON.stringify(partys) %>,
		statistic : <%- JSON.stringify(statistic) %>,
		options: <%- JSON.stringify(options) %>
	});	

	/*var myview = new NL.View.UserOrganization({
		el:'#main',
		model: new Backbone.Model({
			organization: <%- JSON.stringify(organization) %>,
			registry: <%- JSON.stringify(registry) %>,
			partys: <%- JSON.stringify(partys) %>,
			statistic : <%- JSON.stringify(statistic) %>,
			options: <%- JSON.stringify(options) %>
		})
	});*/
	
	/*var myview = new NL.View.OrganizationStatistic({
		el:'#main',
		collection: new Backbone.Collection(<%- JSON.stringify(statistic) %>)
	});*/
	
	/*var myview = new NL.View.OrganizationUserRegistry({
		el:'#main',
		model: new Backbone.Model(<%- JSON.stringify(options) %>)
	});*/
});

		</script>
		<% include ./../partials/end-footer %>